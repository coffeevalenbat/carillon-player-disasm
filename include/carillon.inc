IF !DEF(CARILLON_INC)

include "hardware.inc"

rev_Check_hardware_inc 4.11.0

DEF CARILLON_INC	EQU 1

IF !DEF(NULL)
	DEF NULL EQU $0000
ENDC

DEF NUM_INSTRUMENTS			EQU 16

DEF INST_STEP_LEN			EQU 16

DEF NUM_WAVEFORMS			EQU 16

DEF NUM_SAMPLES				EQU 16

DEF NUM_SONGS				EQU 8

DEF NUM_VIBRATO				EQU 6

; 255 usable slots, last one is reserved for encoding a loop
DEF ORDER_LIST_LEN			EQU 255

DEF CHB_NOTE_NOT_PLAYING	EQU 0
DEF CHB_RESERVED_FX			EQU 1
DEF CHB_RESERVED_SMP		EQU 2

DEF CHF_NOTE_NOT_PLAYING	EQU 1 << CHB_NOTE_NOT_PLAYING
DEF CHF_RESERVED_FX			EQU 1 << CHB_RESERVED_FX
DEF CHF_RESERVED_SMP		EQU 1 << CHB_RESERVED_SMP

DEF CH3B_INIT				EQU 7
DEF CH3F_INIT				EQU 1 << CH3B_INIT

DEF MUSICB_STOPPED			EQU 0
DEF MUSICF_STOPPED			EQU 1 << MUSICB_STOPPED

DEF MODB_TYPE				EQU 7
DEF MODB_CH3				EQU 2
DEF MODB_CH2				EQU 1
DEF MODB_CH1				EQU 0

DEF MODF_TYPE				EQU 1 << MODB_TYPE
DEF MOD_TYPE_SLIDE			EQU 1 << MODB_TYPE
DEF MOD_TYPE_VIBRATO		EQU 0 << MODB_TYPE


DEF MODF_CH3				EQU 1 << MODB_CH3
DEF MODF_CH2				EQU 1 << MODB_CH2
DEF MODF_CH1				EQU 1 << MODB_CH1

DEF NOTEB_TIED				EQU 0
DEF NOTEF_TIED				EQU 1 << NOTEB_TIED

DEF DEFAULT_MUSICSPEED		EQU $07

; Extra hardware defines to simplify code structure
FOR CH, 1, 4
	DEF rAUD{u:CH}GO		EQU rAUD{u:CH}HIGH
	DEF AUD{u:CH}GO_RESTART	EQU AUD{u:CH}HIGH_RESTART
ENDR

DEF SAMPLE_TICKS_PER_FRAME	EQU 4
; Sample rate = (2 ** 22 / (456 * 154)) * SAMPLE_TICKS_PER_FRAME * AUD3WAVE_SIZE * 2) = ~7645Hz
; CH3 Frequency = 2048 - (2 ** 21 / ((2 ** 22 / (456 * 154)) * SAMPLE_TICKS_PER_FRAME * AUD3WAVE_SIZE * 2)) = 1773.6875 units
; So technically the more "correct" value would be 1774!
DEF SAMPLE_CH3_FREQ			EQU 1773

DEF DN_JUMP					EQU $00
DEF DN_END					EQU $FF

; Note indexes
RSSET 12
DEF C_0 RB
DEF C#0 RB
DEF D_0 RB
DEF D#0 RB
DEF E_0 RB
DEF F_0 RB
DEF F#0 RB
DEF G_0 RB
DEF G#0 RB
DEF A_0 RB
DEF A#0 RB
DEF B_0 RB
DEF C_1 RB
DEF C#1 RB
DEF D_1 RB
DEF D#1 RB
DEF E_1 RB
DEF F_1 RB
DEF F#1 RB
DEF G_1 RB
DEF G#1 RB
DEF A_1 RB
DEF A#1 RB
DEF B_1 RB
DEF C_2 RB
DEF C#2 RB
DEF D_2 RB
DEF D#2 RB
DEF E_2 RB
DEF F_2 RB
DEF F#2 RB
DEF G_2 RB
DEF G#2 RB
DEF A_2 RB
DEF A#2 RB
DEF B_2 RB
DEF C_3 RB
DEF C#3 RB
DEF D_3 RB
DEF D#3 RB
DEF E_3 RB
DEF F_3 RB
DEF F#3 RB
DEF G_3 RB
DEF G#3 RB
DEF A_3 RB
DEF A#3 RB
DEF B_3 RB
DEF C_4 RB
DEF C#4 RB
DEF D_4 RB
DEF D#4 RB
DEF E_4 RB
DEF F_4 RB
DEF F#4 RB
DEF G_4 RB
DEF G#4 RB
DEF A_4 RB
DEF A#4 RB
DEF B_4 RB
DEF C_5 RB
DEF C#5 RB
DEF D_5 RB
DEF D#5 RB
DEF E_5 RB
DEF F_5 RB
DEF F#5 RB
DEF G_5 RB
DEF G#5 RB
DEF A_5 RB
DEF A#5 RB
DEF B_5 RB
DEF UNR_NOTE RB
DEF SMP EQU $FF

; Hacky, use negatives to define fancy stuff
DEF ___ EQU -1
DEF __ 	EQU -1
DEF TI	EQU -2

; Effects
RSSET 1
; Effect 0/___ is already handled hackily
DEF MO RB
DEF SL RB
DEF VW RB
DEF VR RB
DEF UP RB
DEF DN RB
DEF TM RB
DEF BR RB

;; Helper functions

MACRO carillon_log
	IF DEF(CARILLON_LOG)
		dbg_log \#
	ENDC
ENDM

MACRO wavetable ; 0123456789ABCDEF0123456789ABCDEF
	; Filter out unwanted characters
	DEF UNWANTED_CHARS EQUS "\t ,"
	DEF WAVECHARS EQUS "\#"
	FOR N, 1, STRLEN("{UNWANTED_CHARS}") + 1
		REDEF WAVECHARS EQUS STRRPL("{WAVECHARS}", STRSUB("{UNWANTED_CHARS}", N, 1), "")
	ENDR
	FOR CH, 1, STRLEN("{WAVECHARS}") + 1, 2
		DEF WAVEBYTE EQUS STRFMT("db $%s\nPURGE WAVEBYTE\n", STRSUB("{WAVECHARS}0", CH, 2))
		WAVEBYTE
	ENDR
	PURGE WAVECHARS, UNWANTED_CHARS
ENDM

; Defines subpattern data for Pulse Channels containing Volume and Length data
MACRO dpVolLen ; (Vol, Len) or (JUMP)
IF _NARG == 2
	db (\1 << 4) | (\2)
ELSE
	db \1
ENDC
ENDM

MACRO dpNoteDuty ; (Note, Duty) or (JUMP)
IF _NARG == 2
	db ((\1 - C_3) << 2) | (\2)
ELSE
	db \1
ENDC
ENDM

MACRO dwIndexLen ; (Idx, Len) or (JUMP)
IF _NARG == 2
	db (\1 << 4) | (\2)
ELSE
	db \1
ENDC
ENDM

MACRO dwNoteVol ; (Note, Duty) or (JUMP)
IF _NARG == 2
	db ((\1 - C_3) << 2) | ((-\2) & %11)
ELSE
	db \1
ENDC
ENDM

MACRO dnVolLen ; (Vol, Len) or (JUMP)
IF _NARG == 2
	db (\1 << 4) | (\2)
ELSE
	db \1
ENDC
ENDM

MACRO dnPolyFreq ; Freq or JUMP
	db \1
ENDM

MACRO dn ; CH1Note, Tied/INST, CH2Note, Tied/INST, CH3Note/SMP, Tied/SFX/SMPIndex, CH4Inst, FXComm, FXArg
	; CH1
	IF \1 == ___
		db $00 | (\2 == TI)
	ELSE
		db (\1 << 1) | (\2 == TI)
	ENDC
	IF (\2 == __) || (\2 == TI)
		db $00
	ELSE
		db \2 << 4
	ENDC

	; CH2
	IF \3 == ___
		db $00 | (\4 == TI)
	ELSE
		db (\3 << 1) | (\4 == TI)
	ENDC
	IF (\4 == __) || (\4 == TI)
		db $00
	ELSE
		db \4 << 4
	ENDC

	; CH3
	IF \5 == SMP
		db \5
	ELIF \5 == ___
		db $00 | (\6 == TI)
	ELSE
		db (\5 << 1) | (\6 == TI)
	ENDC
	IF \5 == SMP
		db \6
	ELIF (\6 == __) || (\6 == TI)
		db $00
	ELSE
		db \6 << 4
	ENDC

	; CH4
	IF \7 == __
		db $00
	ELSE
		db (\7 << 4) | $01
	ENDC

	; FX
	IF \8 == __
		db $00
	ELSE
		db (\8 << 4) | (\9)
	ENDC
ENDM

; Placeholder macros for data definitions
; Based on blank project generated by Carillon Editor

IF !DEF(loadSampleInfo)
MACRO loadSampleInfo
; Fill with blank sample pointers
REPT NUM_INSTRUMENTS
	db HIGH(NULL)
	db $01
ENDR
ENDM
ENDC

IF !DEF(loadPanTable)
MACRO loadPanTable
.pulse:
	ds NUM_INSTRUMENTS, $11
.wave:
	ds NUM_INSTRUMENTS, $11
.noise:
	ds NUM_INSTRUMENTS, $11
.smp:
	ds NUM_INSTRUMENTS, $11
ENDM
ENDC

IF !DEF(loadPulseVolLen)
MACRO loadPulseVolLen
	REPT NUM_INSTRUMENTS
	REPT INST_STEP_LEN
		db $00
	ENDR
	ENDR
ENDM
ENDC

IF !DEF(loadPulseNoteDuty)
MACRO loadPulseNoteDuty
	REPT NUM_INSTRUMENTS
	REPT INST_STEP_LEN
		db $FF
	ENDR
	ENDR
ENDM
ENDC

IF !DEF(loadWaveIndexLen)
MACRO loadWaveIndexLen
	REPT NUM_INSTRUMENTS
	REPT INST_STEP_LEN
		db $00
	ENDR
	ENDR
ENDM
ENDC

IF !DEF(loadWaveNoteVol)
MACRO loadWaveNoteVol
	REPT NUM_INSTRUMENTS
	REPT INST_STEP_LEN
		db $FF
	ENDR
	ENDR
ENDM
ENDC

; Default waveforms given by the original editor
IF !DEF(loadWavetable)
MACRO loadWavetable
	wavetable FFFF0000000000000000000000000000
	wavetable FFFFFFFF000000000000000000000000
	wavetable FFFFFFFFFFFFFFFF0000000000000000
	wavetable FFFFFFFFFFFFFFFFFFFFFFFF00000000
	wavetable FFEEDDCCBBAA99887766554433221100
	wavetable EFEDDDCBBBA999887766654443222101
	wavetable CFFEDDCCBBAA99887766554433321003
	wavetable BFFECBBBBBAA98887776554444431004
	wavetable BEFFFEDCBA9988887777665432100014
	wavetable BDEEFFEEEDCCBA987654332111001124
	wavetable FCECCBBBBAA998887776655544433230
	wavetable FECDCBCBAAA999887776655543432310
	wavetable EFDBBCDBA9AA98778876556543344201
	wavetable CFFECA99AAAA99887776555666541003
	wavetable BEFFEDBA988888888777777654310014
	wavetable CEFFFFFEEDCCBA987654332110000013
ENDM
ENDC

IF !DEF(loadNoiseVolLen)
MACRO loadNoiseVolLen
	REPT NUM_INSTRUMENTS
	REPT INST_STEP_LEN
		db $00
	ENDR
	ENDR
ENDM
ENDC

IF !DEF(loadNoiseFreq)
MACRO loadNoiseFreq
	REPT NUM_INSTRUMENTS
	REPT INST_STEP_LEN
		db $FF
	ENDR
	ENDR
ENDM
ENDC

IF !DEF(loadOrderTable)
MACRO loadOrderTable
	; Blank entry
	db HIGH(placeholderPattern)
ENDM
ENDC

IF !DEF(loadPatternData)
MACRO loadPatternData
ds align[8]
placeholderPattern:
REPT 32
	dn ___, __, ___, __, ___, __, __, __, __
ENDR
ENDM
ENDC

IF !DEF(loadSampleData)
MACRO loadSampleData
ENDM
ENDC


ENDC